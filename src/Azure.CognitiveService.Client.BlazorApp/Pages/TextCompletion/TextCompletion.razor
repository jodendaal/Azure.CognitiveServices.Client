@page "/textCompletion"
@inject ITextCompletionService TextCompletionSerice
@inject IOptionsSnapshot<AzureOpenAIConfig> OpenAIConfig;

<PageTitle>Text Completion Example</PageTitle>
<div class="px-4">
<h1>Text Completion Streaming Example</h1>

<p>This component demonstrates returning data from the TextCompletion endpoint.</p>

<EditForm Model="@searchModel" OnValidSubmit="@GetCompletion">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="exampleInputEmail1" class="form-label">Prompt</label>
        <InputText id="name" @bind-Value="searchModel.SearchText" class="form-control " />
        <div id="emailHelp" class="form-text">Text to send to OpenAI Text Completion endpoint</div>
    </div>

    <div class="mb-3">
        <label for="exampleInputEmail1" class="form-label">No. of results</label>
        <InputNumber id="noOfResults" @bind-Value="searchModel.NoOfResults" class="form-control" />
        <div id="emailHelp" class="form-text">How many results to return</div>
    </div>

    <div class="mb-3">
        <label for="exampleInputEmail1" class="form-label">Max Tokens</label>
        <InputNumber id="maxTokens" @bind-Value="searchModel.MaxTokens" class="form-control" />
        <div id="emailHelp" class="form-text">Max tokens to consume, relates to how long the completion will be, N.B this includes your prompt</div>
    </div>

    <button type="submit" class="btn btn-primary">Search</button>
</EditForm>


<ul class="ul-response">
    @foreach (var result in results)
    {
        <li>
            <pre class="pre-response">
                @result
            </pre>
        </li>
    }
</ul>
</div>

@code {
    private AzureOpenAIConfig config => OpenAIConfig.Get("textCompletion");
    private string[] results = new string[0];
    private SearchModel searchModel = new()
    {
        MaxTokens = 300,
        NoOfResults = 1,
        SearchText = "List 5 reasons how AI going to change the world?"
    };

    private async Task GetCompletion()
    {
        results = new string[searchModel.NoOfResults];

        await foreach (var result in TextCompletionSerice.CreateStream(searchModel.SearchText, config, o =>
        {
            o.N = searchModel.NoOfResults;
            o.MaxTokens = searchModel.MaxTokens;
        }))
        {
            var index = result.Value!.Choices[0].Index;
            results[index] += result.Value.ToString();
            StateHasChanged();
        }
    }
}
