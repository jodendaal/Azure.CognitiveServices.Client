@page "/chat"
@using Azure.CognitiveServices.Client.OpenAI.Models;
@using Azure.CognitiveService.Client
@using Azure.CognitiveService.Client.BlazorApp.Models;
@using Azure.CognitiveService.Client.BlazorApp.Pages.Chat.Components
@using Azure.CognitiveServices.Client.OpenAI.Models.Requests;
@using Azure.CognitiveServices.Client.OpenAI.Models.Responses.Common;
@using Azure.CognitiveServices.Client.OpenAI.ExtensionMethods;
@using BlazorStrap;
@using Microsoft.Extensions.Options;
@using System.Text.Json;
@inject IChatCompletionService ChatCompletionSerice
@inject IOptionsSnapshot<AzureOpenAIConfig> OpenAIConfig;
@inject IJSRuntime JS

<div class="chat-container">

   

    <ConversationContext SearchModel="@SelectedSearchModel" IsVisible="@SidePanelVisible" SearchModels="SearchModelExamples" SelectedSearchModelChanged="OnExampleChanged">
    </ConversationContext>
   

    <div class="chat">
       
            <CollapseButton
                OnLeftButtonClicked="OnHideSidePanelClicked"
                LeftIsOpen="@SidePanelVisible"
                RightIsOpen="@RightSidePanelVisible"
                OnRightButtonClicked="OnHideRightSidePanelClicked">
            </CollapseButton>
            
       
        <Conversation Results="@ConversationHistory"></Conversation>

        <div class="input-area">
            <ErrorIndicator ErrorText="@ErrorText"></ErrorIndicator>
            <LoadingIndicator StatusText="@StatusText"></LoadingIndicator>

            <ChatInput SearchModel="@SelectedSearchModel"
                OnGenerateTextCompletionSubmitted="@OnTextCompletionSubmitted"
                IsBusy="@IsBusy">
            </ChatInput>
        </div>
    </div>

    <RequestOptions SearchModel="@SelectedSearchModel" IsVisible="@RightSidePanelVisible" OnViewCodeClicked="OnShowCodeClicked"></RequestOptions>

</div>


<BSModal IsCentered="true" Class="code-modal" @ref="refModal">
   
    <Header>Sample Code</Header>
    <Content>
        <div class="mb-3">
          <label for="exampleFormControlInput1" class="form-label">Url</label>

            <textarea class="form-control text-area" value="@CodeExampleUrl()" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" />
        </div>
        <div class="mb-3">
          <label for="exampleFormControlTextarea1" class="form-label">JSON Body</label>
            <textarea class="form-control text-area" value=" @JsonRequest()" rows="15" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" />
        </div>
        <div class="mb-3">
            <label for="exampleFormControlTextarea1" class="form-label">Headers</label>
            <textarea class="form-control text-area" value="@CodeExampleHeaders()" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"/>
        </div>
    </Content>
      
    <Footer Context="modal">
        <button class="button" @onclick="OnCloseCodeClicked">Close</button>
    </Footer>

</BSModal>

@code {
    BSModal refModal;
    private AzureOpenAIConfig config => OpenAIConfig.Get("chat");
    private bool SidePanelVisible = true;
    private bool RightSidePanelVisible = true;
    private string? ErrorText = "";
    private string StatusText = "";
    private bool IsBusy = false;
    private List<ChatInfo> ConversationHistory = new List<ChatInfo>();
    private ChatSearchModel SelectedSearchModel { get; set; } = new ChatSearchModel();
    private List<ChatSearchModel> SearchModelExamples = new List<ChatSearchModel>();

    protected override Task OnInitializedAsync()
    {
        LoadExamples();
        SelectedSearchModel = SearchModelExamples!.First();
        return base.OnInitializedAsync();
    }


    private async Task SendChatCompletionRequest()
    {
      

        this.setIsProcessing(true);

        this.ConversationHistory.Add(new ChatInfo() { User = "User", Message = this.SelectedSearchModel.SearchText });
        this.ConversationHistory.Add(new ChatInfo() { User = "AI", Message = string.Empty });

        try
        {
            var request = CreateRequest();
            SelectedSearchModel.SearchText = string.Empty;
            await foreach (var result in ChatCompletionSerice.CreateStream(request, config))
            {
                this.ConversationHistory[ConversationHistory.Count - 1].Message += result.Value!.Choices[0].Delta.Content;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ErrorText = $"An error occured : {ex.Message}";
        }

        this.setIsProcessing(false);
    }

    private string CodeExampleHeaders()
    {
        return $"Content-Type : application/json\r\napi-key : YOUR_API_KEY";
    }

    private string CodeExampleUrl()
    {
        return $"{config.ApiUrl}/openai/deployments/{config.DeploymentName}/chat/completions?api-version={config.ApiVersion}";
    }
    private string JsonRequest()
    {
        var request = CreateRequest();
        var json = JsonSerializer.Serialize(request,new JsonSerializerOptions()
        {
            WriteIndented = true,
            DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        });
        return json;
    }

    private ChatCompletionRequest CreateRequest()
    {
        var messages = new List<Message>();
        if (!string.IsNullOrWhiteSpace(SelectedSearchModel.System))
        {
            messages.Add(Message.Create(ChatRoleType.System, SelectedSearchModel.System));
        }

        if (!string.IsNullOrWhiteSpace(SelectedSearchModel.Assistant))
        {
            messages.Add(Message.Create(ChatRoleType.Assistant, SelectedSearchModel.Assistant));
        }

        messages.AddRange(GetPreviousMessageContext());

        if (!string.IsNullOrWhiteSpace(SelectedSearchModel.SearchText))
        {
            messages.Add(Message.Create(ChatRoleType.User, SelectedSearchModel.SearchText));
        }
        var request = new ChatCompletionRequest(messages)
        {
            N = 1,
            MaxTokens = SelectedSearchModel.ChatCompletionRequest.MaxTokens,
            TopP = SelectedSearchModel.ChatCompletionRequest.TopP,
            Temperature = SelectedSearchModel.ChatCompletionRequest.Temperature
        };

        return request;
    }

    private List<Message> GetPreviousMessageContext()
    {
        decimal messagePerType = this.SelectedSearchModel.NumberOfPreviousMessageToInclude == 0 ? 0 : (decimal)this.SelectedSearchModel.NumberOfPreviousMessageToInclude / 2;
        int previousMessageCount = (int)Math.Ceiling(messagePerType);

        var userMessages= this.ConversationHistory.Where(i => i.User == "User");
        var aIMessags = this.ConversationHistory.Where(i => i.User == "AI");

        if(userMessages.Count() > messagePerType)
        {
            userMessages = userMessages.Skip(Math.Max(0, userMessages.Count() - previousMessageCount)).Take(previousMessageCount);
        }

        if (aIMessags.Count() > messagePerType)
        {
            aIMessags = aIMessags.Skip(Math.Max(0, aIMessags.Count() - previousMessageCount)).Take(previousMessageCount);
        }

        var result = new List<Message>();
        result.AddRange(userMessages.Select(message => Message.Create(ChatRoleType.User,message.Message)));
        result.AddRange(aIMessags.Select(message => Message.Create(ChatRoleType.Assistant, message.Message)));

        return result;

    }

    void OnAudioTextUpdated(string text)
    {
        this.SelectedSearchModel.SearchText = text;
    }

    private void setIsProcessing(bool value, string statusMessage = "Generating")
    {
        if (value)
        {
            this.ErrorText = "";
        }
        this.StatusText = value ? statusMessage : "";
        this.IsBusy = value;
        this.StateHasChanged();
    }

    void OnExampleChanged(string name)
    {
        LoadExamples();
        this.ConversationHistory.Clear();
        SelectedSearchModel = SearchModelExamples.First(i => i.Name == name);
    }


    private void LoadExamples()
    {
        var path = Path.Combine(System.IO.Directory.GetCurrentDirectory(), "wwwroot", "ExampleChats.json");
        var json = File.ReadAllText(path);
        SearchModelExamples = JsonSerializer.Deserialize<List<ChatSearchModel>>(json) ?? new List<ChatSearchModel>();

    }

      private void OnCloseCodeClicked()
    {
        refModal.HideAsync();
    }

    private void OnShowCodeClicked()
    {
        refModal.ShowAsync();
    }

    private void OnHideSidePanelClicked()
    {
        this.SidePanelVisible = !this.SidePanelVisible;
    }

    private void OnHideRightSidePanelClicked()
    {
        this.RightSidePanelVisible = !this.RightSidePanelVisible;
    }

    private async Task OnTextCompletionSubmitted()
    {
        await SendChatCompletionRequest();
    }
}
