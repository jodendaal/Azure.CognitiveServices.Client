@page "/chat"

@using Azure.CognitiveService.Client
@using Azure.CognitiveService.Client.BlazorApp.Data;
@using Azure.CognitiveService.Client.BlazorApp.Pages.Chat.Components
@using Azure.CognitiveServices.Client.OpenAI.Models.Requests;
@using Azure.CognitiveServices.Client.OpenAI.Models.Responses.Common;
@using Azure.CognitiveServices.Client.OpenAI.ExtensionMethods;
@using Microsoft.Extensions.Options;
@using System.Text.Json;
@inject IChatCompletionService ChatCompletionSerice
@inject IOptionsSnapshot<AzureOpenAIConfig> OpenAIConfig;
@inject IJSRuntime JS

<div class="chat-container">

   

    <ConversationContext SearchModel="@SelectedSearchModel" IsVisible="@SidePanelVisible" SearchModels="SearchModelExamples" SelectedSearchModelChanged="OnExampleChanged">
    </ConversationContext>
   

    <div class="chat">
       
            <CollapseButton
                OnLeftButtonClicked="OnHideSidePanelClicked"
                LeftIsOpen="@SidePanelVisible"
                RightIsOpen="@RightSidePanelVisible"
                OnRightButtonClicked="OnHideRightSidePanelClicked">
            </CollapseButton>
            
       
        <Conversation Results="@ConversationHistory"></Conversation>

        <div class="input-area">
            <ErrorIndicator ErrorText="@ErrorText"></ErrorIndicator>
            <LoadingIndicator StatusText="@StatusText"></LoadingIndicator>

            <ChatInput SearchModel="@SelectedSearchModel"
                OnGenerateTextCompletionSubmitted="@OnTextCompletionSubmitted"
                OnGenerateImageClicked="OnGenerateImageClicked"
                IsBusy="@IsBusy">
            </ChatInput>
        </div>
    </div>

    <RequestOptions Options="@ChatCompletionRequest" IsVisible="@RightSidePanelVisible"></RequestOptions>

</div>

@code {
    private AzureOpenAIConfig config => OpenAIConfig.Get("chat");
    private bool SidePanelVisible = true;
    private bool RightSidePanelVisible = true;
    private string? ErrorText = "";
    private string StatusText = "";
    private bool IsBusy = false;
    private List<ChatInfo> ConversationHistory = new List<ChatInfo>();
    private ChatSearchModel SelectedSearchModel { get; set; }
    private ChatCompletionRequest ChatCompletionRequest { get; set; } = new ChatCompletionRequest(new List<Message>()) { MaxTokens=2048};
    private List<ChatSearchModel> SearchModelExamples = new List<ChatSearchModel>();


   

    protected override Task OnInitializedAsync()
    {
        LoadExamples();
        return base.OnInitializedAsync();
    }


    private async Task SendTextCompletionRequest(string text)
    {
        SelectedSearchModel.SearchText = string.Empty;

        this.setIsProcessing(true);
        this.ConversationHistory.Add(new ChatInfo() { User = "TimDoesTech", Message = text });


        var messagesRequest = new List<Message>()
            {
                Message.Create(ChatRoleType.System,SelectedSearchModel.System),
                Message.Create(ChatRoleType.Assistant, SelectedSearchModel.Assistant)
            };

        messagesRequest.Add(Message.Create(ChatRoleType.User, text));

        this.ConversationHistory.Add(new ChatInfo() { User = "AI", Message = string.Empty });

        try
        {
            await foreach (var result in ChatCompletionSerice.CreateStream(messagesRequest, config, o =>
            {
                o.N =1;
                o.MaxTokens = ChatCompletionRequest.MaxTokens;
                o.TopP = ChatCompletionRequest.TopP;
                o.Temperature = ChatCompletionRequest.Temperature;
                
            }))
            {
                this.ConversationHistory[ConversationHistory.Count - 1].Message += result.Value!.Choices[0].Delta.Content;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ErrorText = $"An error occured : {ex.Message}";
        }

        SelectedSearchModel.Assistant += $"\r\n{this.ConversationHistory[ConversationHistory.Count - 1].Message}";

        this.setIsProcessing(false);
    }

    void OnAudioTextUpdated(string text)
    {
        this.SelectedSearchModel.SearchText = text;
    }
  
    private void setIsProcessing(bool value, string statusMessage = "Generating")
    {
        this.StatusText = value ? statusMessage : "";
        this.IsBusy = value;
        this.StateHasChanged();
    }

    void OnExampleChanged(ChatSearchModel value)
    {
        SelectedSearchModel = value;
    }


    private void LoadExamples()
    {
        var path = Path.Combine(System.IO.Directory.GetCurrentDirectory(), "wwwroot", "ExampleChats.json");
        var json = File.ReadAllText(path);
        SearchModelExamples = JsonSerializer.Deserialize<List<ChatSearchModel>>(json);
        SelectedSearchModel = SearchModelExamples.First();
    }

    private async Task OnHideSidePanelClicked()
    {
        this.SidePanelVisible = !this.SidePanelVisible;
    }

    private async Task OnHideRightSidePanelClicked()
    {
        this.RightSidePanelVisible = !this.RightSidePanelVisible;
    }

    private async Task OnTextCompletionSubmitted()
    {
        await SendTextCompletionRequest(SelectedSearchModel.SearchText);
    }

    private async Task OnGenerateImageClicked()
    {
        //setIsProcessing(true, "Generating Image");

        //var imageResponse = await OpenAIService.Images.Generate(SearchModel.SearchText, 1);
        //if (imageResponse.IsSuccess)
        //{
        //    this.ConversationHistory.Add(new ChatInfo()
        //        {
        //            User = "AI",
        //            Message = $@"<img src=""{imageResponse?.Result?.Data[0].Url}"" alt=""drawing"" width=""400"" />"
        //        });
        //}
        //else
        //{
        //    this.ErrorText = imageResponse.ErrorResponse?.Error?.Message;
        //}
        //this.setIsProcessing(false);
    }
}
