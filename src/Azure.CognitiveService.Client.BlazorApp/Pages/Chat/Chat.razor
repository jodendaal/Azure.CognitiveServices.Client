@page "/chat"
@using Azure.CognitiveService.Client.BlazorApp.Pages.Chat.Components
@inject IChatCompletionService ChatCompletionSerice
@inject IOptionsSnapshot<AzureOpenAIConfig> OpenAIConfig;
@inject IJSRuntime JSRuntime

<div class="chat-container">

    <ConversationContext 
        SearchModel="@SelectedSearchModel"
        IsVisible="@LeftSidePanelVisible"
        SearchModels="SearchModelExamples"
        SelectedSearchModelChanged="OnExampleChanged">
    </ConversationContext>

    <div class="chat">
       
        <CollapseButton
            OnLeftButtonClicked="OnHideLeftSidePanelClicked"
            LeftIsOpen="@LeftSidePanelVisible"
            RightIsOpen="@RightSidePanelVisible"
            OnRightButtonClicked="OnHideRightSidePanelClicked">
        </CollapseButton>
            
       
        <Conversation
            Results="@ConversationHistory">
        </Conversation>

        <div class="input-area">
            <ErrorIndicator ErrorText="@ErrorText" />

            <LoadingIndicator StatusText="@StatusText" />

            <SpeechToTextDisplay 
                IsRecording="@IsRecording" 
                Text="@VoiceRecordingPartial" 
                OnStopRecordingClicked="OnStopRecordingClicked" />
            

            <ChatInput SearchModel="@SelectedSearchModel"
                OnGenerateTextCompletionSubmitted="@OnTextCompletionSubmitted"
                IsBusy="@IsBusy"
                IsRecording="@IsRecording"
                OnRecordClicked="OnRecordClicked" />
            
        </div>
    </div>

    <RequestOptions
        SearchModel="@SelectedSearchModel" 
        IsVisible="@RightSidePanelVisible"
        OnViewCodeClicked="OnShowCodeClicked">
    </RequestOptions>

</div>

<CodeExampleModal @ref="ViewCodeModalRef" 
    ChatRequest="CreateRequest()">
</CodeExampleModal>


@code {
    CodeExampleModal? ViewCodeModalRef;
    private bool IsRecording = false;
    private string VoiceRecordingPartial = string.Empty;
    private AzureOpenAIConfig config => OpenAIConfig.Get("chat");
    private bool LeftSidePanelVisible = true;
    private bool RightSidePanelVisible = true;
    private string? ErrorText  = string.Empty;
    private string StatusText = string.Empty;
    private bool IsBusy = false;
    private List<ChatInfo> ConversationHistory = new List<ChatInfo>();
    private ChatSearchModel SelectedSearchModel { get; set; } = new ChatSearchModel();
    private List<ChatSearchModel> SearchModelExamples = new List<ChatSearchModel>();
    private SpeechToText SpeechToTextHelper;

    protected override async Task OnInitializedAsync()
    {
        this.LoadExamples();
        this.SelectedSearchModel = this.SearchModelExamples!.First();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await this.InitialiseVoiceToText();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task SendChatCompletionRequest()
    {
        this.setIsProcessing(true);

        this.ConversationHistory.Add(new ChatInfo() { User = "User", Message = this.SelectedSearchModel.SearchText });
        this.ConversationHistory.Add(new ChatInfo() { User = "AI", Message = string.Empty });

        try
        {
            var request = CreateRequest();
            this.SelectedSearchModel.SearchText = string.Empty;
            await foreach (var result in ChatCompletionSerice.CreateStream(request, config))
            {
                this.ConversationHistory[ConversationHistory.Count - 1].Message += result.Value!.Choices[0].Delta.Content;
                this.StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            this.ErrorText = $"An error occured : {ex.Message}";
        }

        this.setIsProcessing(false);
    }

    private ChatCompletionRequest CreateRequest()
    {
        var messages = new List<Message>();
        if (!string.IsNullOrWhiteSpace(SelectedSearchModel.System))
        {
            messages.Add(Message.Create(ChatRoleType.System, SelectedSearchModel.System));
        }

        if (!string.IsNullOrWhiteSpace(SelectedSearchModel.Assistant))
        {
            messages.Add(Message.Create(ChatRoleType.Assistant, SelectedSearchModel.Assistant));
        }

        messages.AddRange(GetPreviousMessageContext());

        if (!string.IsNullOrWhiteSpace(SelectedSearchModel.SearchText))
        {
            messages.Add(Message.Create(ChatRoleType.User, SelectedSearchModel.SearchText));
        }
        var request = new ChatCompletionRequest(messages)
        {
            N = 1,
            MaxTokens = SelectedSearchModel.ChatCompletionRequest.MaxTokens,
            TopP = SelectedSearchModel.ChatCompletionRequest.TopP,
            Temperature = SelectedSearchModel.ChatCompletionRequest.Temperature
        };

        return request;
    }

    private List<Message> GetPreviousMessageContext()
    {
        decimal messagePerType = this.SelectedSearchModel.NumberOfPreviousMessageToInclude == 0 ? 0 : (decimal)this.SelectedSearchModel.NumberOfPreviousMessageToInclude / 2;
        int previousMessageCount = (int)Math.Ceiling(messagePerType);

        var userMessages= this.ConversationHistory.Where(i => i.User == "User");
        var aIMessags = this.ConversationHistory.Where(i => i.User == "AI");

        if(userMessages.Count() > messagePerType)
        {
            userMessages = userMessages.Skip(Math.Max(0, userMessages.Count() - previousMessageCount)).Take(previousMessageCount);
        }

        if (aIMessags.Count() > messagePerType)
        {
            aIMessags = aIMessags.Skip(Math.Max(0, aIMessags.Count() - previousMessageCount)).Take(previousMessageCount);
        }

        var result = new List<Message>();
        result.AddRange(userMessages.Select(message => Message.Create(ChatRoleType.User,message.Message)));
        result.AddRange(aIMessags.Select(message => Message.Create(ChatRoleType.Assistant, message.Message)));

        return result;

    }

    private void setIsProcessing(bool value, string statusMessage = "Generating")
    {
        if (value)
        {
            this.ErrorText = "";
        }
        this.StatusText = value ? statusMessage : "";
        this.IsBusy = value;
        this.StateHasChanged();
    }

    private void LoadExamples()
    {
        var path = Path.Combine(System.IO.Directory.GetCurrentDirectory(), "wwwroot", "ExampleChats.json");
        var json = File.ReadAllText(path);
        this.SearchModelExamples = JsonSerializer.Deserialize<List<ChatSearchModel>>(json) ?? new List<ChatSearchModel>();
    }

     void OnExampleChanged(string name)
    {
        LoadExamples();
        this.ConversationHistory.Clear();
        this.SelectedSearchModel = this.SearchModelExamples.First(i => i.Name == name);
    }

    void OnAudioTextUpdated(string text)
    {
        this.SelectedSearchModel.SearchText = text;
    }

    private void OnShowCodeClicked()
    {
        this.ViewCodeModalRef?.ShowAsync();
    }

    private void OnHideLeftSidePanelClicked()
    {
        this.LeftSidePanelVisible = !this.LeftSidePanelVisible;
    }

    private void OnHideRightSidePanelClicked()
    {
        this.RightSidePanelVisible = !this.RightSidePanelVisible;
    }

    private async Task OnTextCompletionSubmitted()
    {
        await this.SendChatCompletionRequest();
    }

    private async Task OnStopRecordingClicked()
    {
        this.VoiceRecordingPartial = string.Empty;
        this.IsRecording = false;
        await this.SpeechToTextHelper.Stop();
    }

    private async Task OnRecordClicked()
    {
        this.IsRecording = true;
        await this.SpeechToTextHelper.Start((text) =>
            {
                this.OnVoiceTextReceived(text);
            });
    }

    private void OnVoiceTextReceived(string text)
    {
        if (!this.IsRecording)
        {
            this.SelectedSearchModel.SearchText = text;
        }
        else
        {
            this.VoiceRecordingPartial = text;
        }

        StateHasChanged();
    }

    private async Task InitialiseVoiceToText()
    {
        if (this.SpeechToTextHelper == null)
        {
            this.SpeechToTextHelper = new SpeechToText(JSRuntime);
            await this.SpeechToTextHelper.Initialise();
        }
    }
}
